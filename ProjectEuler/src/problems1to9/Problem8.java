package problems1to9;

//Question -----------------------------------------------------------------------------------------------------------------------
// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
//
//		73167176531330624919225119674426574742355349194934
//		96983520312774506326239578318016984801869478851843
//		85861560789112949495459501737958331952853208805511
//		12540698747158523863050715693290963295227443043557
//		66896648950445244523161731856403098711121722383113
//		62229893423380308135336276614282806444486645238749
//		30358907296290491560440772390713810515859307960866
//		70172427121883998797908792274921901699720888093776
//		65727333001053367881220235421809751254540594752243
//		52584907711670556013604839586446706324415722155397
//		53697817977846174064955149290862569321978468622482
//		83972241375657056057490261407972968652414535100474
//		82166370484403199890008895243450658541227588666881
//		16427171479924442928230863465674813919123162824586
//		17866458359124566529476545682848912883142607690042
//		24219022671055626321111109370544217506941658960408
//		07198403850962455444362981230987879927244284909188
//		84580156166097919133875499200524063689912560717606
//		05886116467109405077541002256983155200055935729725
//		71636269561882670428252483600823257530420752963450
//
// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
//---------- -----------------------------------------------------------------------------------------------------------------------
//Solution correct 

public class Problem8 {

	public static void main(String[] args) {
		long biggestProduct = 0;
		long adjacentSum; 
		
		String allDigits = "731671765313306249192251196744265747423553491949349698352031277450"
				    	+ "6326239578318016984801869478851843858615607891129494954595017379583"
				    	+ "3195285320880551112540698747158523863050715693290963295227443043557"
				    	+ "6689664895044524452316173185640309871112172238311362229893423380308"
				    	+ "1353362766142828064444866452387493035890729629049156044077239071381"
				    	+ "0515859307960866701724271218839987979087922749219016997208880937766"
				    	+ "5727333001053367881220235421809751254540594752243525849077116705560"
				    	+ "1360483958644670632441572215539753697817977846174064955149290862569"
				    	+ "3219784686224828397224137565705605749026140797296865241453510047482"
				    	+ "1663704844031998900088952434506585412275886668811642717147992444292"
				    	+ "8230863465674813919123162824586178664583591245665294765456828489128"
				    	+ "8314260769004224219022671055626321111109370544217506941658960408071"
				    	+ "9840385096245544436298123098787992724428490918884580156166097919133"
				    	+ "8754992005240636899125607176060588611646710940507754100225698315520"
				    	+ "005593572972571636269561882670428252483600823257530420752963450"; 
		
		// Go through all adjacent sums 
		for(int index = 0; index <= 987; index ++){
			adjacentSum = add13(index, allDigits);
			if(adjacentSum > biggestProduct){
				biggestProduct = adjacentSum;
			}
		}
		
		// print out the answer 
		System.out.println(biggestProduct);

	}
	
	// Private Function
	// Add 13 adjacent ints, the index being the leftmost int 
	private static long add13(int index, String allDigits) {
		long tempCombo = 1; 
		
		// Multiplying 13 Adjacent ints
		for(int j = 0; j < 13; j++){
			// The -48 here converts from char to int. '1' = 49
			tempCombo *= (int)allDigits.charAt(index + j) - 48;
		}
		return tempCombo; 
	}

}
