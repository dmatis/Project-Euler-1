package problems40to49;

import java.util.ArrayList;
import java.util.List;

//Question -----------------------------------------------------------------------------------------------------------------------
//	Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
//	
//	1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//	
//	It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
//	
//	Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
//---------- -----------------------------------------------------------------------------------------------------------------------
// Solution 'not solved'

public class Problem44 {

	private static List<Long> pentagonalNumbers = new ArrayList<Long>();			// A list of pentagon-numbers that gets updated with a buffer of 50 numbers
	private static int currentIndex = 0; 	// 
	private static int comparingIndex;
	private static long currentNumber = 1; 
	private static long nextNumber = 5;
	private static long foundDif = Long.MAX_VALUE; 						// The current difference with a successful pair 
	
	public static void main(String[] args) {
		
		// Generate a million pentagonal numbers 
		for(long i = 1; i < 1E6; i++){
			pentagonalNumbers.add(i * (3 * i - 1) / 2);
		}

		// TODO COMMENT 
		while((nextNumber - currentNumber) < foundDif) {
	
			// go from right to left checking if it is a successful pair, stop if a pair is found
			for(comparingIndex = currentIndex - 1; comparingIndex >= 0; comparingIndex--) {
				if(successfulpair()) {
					foundDif = currentNumber - pentagonalNumbers.get(comparingIndex);
					break;
				}
			}

			// update
			currentNumber = pentagonalNumbers.get(++currentIndex);
			nextNumber = pentagonalNumbers.get(currentIndex + 1);
			
			//System.out.println(currentNumber);
		}
		 
		// Print out the answer
		System.out.println(foundDif);
	}

	// Private Function
	//
	//
	private static boolean successfulpair() {
		return findDif() && findSum();
	}

	// Private Function
	//
	//
	private static boolean findSum() {
		long numberCheck = currentNumber + pentagonalNumbers.get(comparingIndex);
		return isPentagonal(numberCheck);
	}

	// Private Function
	//
	//
	private static boolean findDif() {
		long numberCheck = currentNumber - pentagonalNumbers.get(comparingIndex);
		return isPentagonal(numberCheck);
	}
	
	// Private Function
	//
	//
	private static boolean isPentagonal(long numberCheck) {
		// TODO 			
	}

}
