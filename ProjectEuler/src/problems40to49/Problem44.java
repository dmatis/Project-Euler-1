package problems40to49;

import java.util.ArrayList;
import java.util.List;

//Question -----------------------------------------------------------------------------------------------------------------------
//	Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
//	
//	1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//	
//	It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
//	
//	Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
//---------- -----------------------------------------------------------------------------------------------------------------------
// Solution 'not solved'

public class Problem44 {

	private static List<Long> pentagonalNumbers = new ArrayList<Long>();			// A list of pentagon-numbers that gets updated with a buffer of 50 numbers
	private static int currentIndex = 0; 	// 
	private static int comparingIndex;
	private static long currentNumber = 1; 
	private static long nextNumber = 5;
	private static long foundDif = Long.MAX_VALUE; 						// The current difference with a successful pair 
	
	public static void main(String[] args) {
		// TODO COMMENT 
		while((nextNumber - currentNumber) < foundDif) {
			// make sure there is enough pentagon-numbers
			if((pentagonalNumbers.size() - currentIndex) < 50){
				add100Numbers();
			}

			// go from right to left checking if it is a successful pair, stop if a pair is found
			for(comparingIndex = currentIndex; comparingIndex >= 0; comparingIndex--) {
				if(successfulpair()) {
					foundDif = currentNumber - pentagonalNumbers.get(comparingIndex);
					break;
				}
			}

			// update
			currentNumber = pentagonalNumbers.get(++currentIndex);
			nextNumber = pentagonalNumbers.get(currentIndex + 1);
			
			//System.out.println(currentNumber);
		}
		 
		// Print out the answer
		System.out.println(foundDif);
	}

	// Private Function
	//
	//
	private static boolean successfulpair() {
		return findDif() && findSum();
	}

	// Private Function
	//
	//
	private static boolean findSum() {
		int findIndex = currentIndex + 1;
		long sum = currentNumber + pentagonalNumbers.get(comparingIndex); 

		for(long numberCheck = pentagonalNumbers.get(findIndex); numberCheck <= sum; numberCheck = pentagonalNumbers.get(findIndex)) {
			if(numberCheck == sum) {
				return true; 
			}
			findIndex++; 
		}

		return false; 
	}
	
	// Private Function
	//
	//
	private static boolean findDif() {
		int findIndex = 0; 
		if(currentIndex != 0){
			findIndex = currentIndex - 1;
		}
		
		long dif = currentNumber - pentagonalNumbers.get(comparingIndex); 

		for(long numberCheck = pentagonalNumbers.get(findIndex); numberCheck <= dif && findIndex >= 1; numberCheck = pentagonalNumbers.get(findIndex)) {
			if(numberCheck == dif) {
				return true; 
			}
			findIndex--; 
		}

		return false;
	}

	// Private Function
	//
	//
	private static void add100Numbers() {		
		for(int i = 0; i < 100; i++) {
			int n = currentIndex + i;
			long number = n*(3*n - 1)/2;
			pentagonalNumbers.add(number);
		}
	}

}
